name: CI/CD for React and SpringBoot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Install Node.js (for React)
        uses: actions/setup-node@v4.3.0
        with:
          node-version: 18.x

      - name: Install React Dependencies
        run: |
          echo "Navigating to client directory to install dependencies..."
          cd client
          npm install
          echo "React dependencies installed."

      - name: Build React Project
        run: |
          echo "Navigating to client directory to build React project..."
          cd client
          CI=false npm run build
          echo "React project built successfully."

      - name: Copy React build files to Spring Boot static directory
        run: |
          echo "Copying React build files to Spring Boot static directory..."
          cd $GITHUB_WORKSPACE
          mkdir -p ./rest/src/main/resources/static/
          cp -r ./client/build/* ./rest/src/main/resources/static/
          echo "React build files copied."

      - name: Set up JDK (for Spring Boot)
        uses: actions/setup-java@v4.7.0
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: |
          echo "Making mvnw executable..."
          chmod +x rest/mvnw
          echo "mvnw is executable."

      - name: Build and Package Spring Boot project (with React files)
        run: |
          echo "Navigating to rest directory to build and package Spring Boot project..."
          cd rest
          ./mvnw clean install -DskipTests
          echo "Spring Boot project built and packaged successfully."

      - name: Upload Spring Boot JAR artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: spring-boot-app
          path: ./rest/target/*.jar
          # This step will upload the JAR found in target/.

  deploy-to-azure-vm:
    runs-on: ubuntu-latest
    needs: build-and-package
    environment: production
    steps:
      - name: Download Spring Boot JAR artifact
        uses: actions/download-artifact@v4.1.4
        with:
          name: spring-boot-app
          path: ./
        # This will download the JAR into the root of the current runner's workspace.

      - name: Set JAR filename and full path
        id: get_jar_name
        run: |
          # Find the JAR file in the current directory and get its full path
          JAR_FILE=$(find . -maxdepth 1 -name "*.jar" -print -quit)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No JAR file found after downloading artifact in $(pwd)."
            exit 1
          fi
          # Output just the filename
          echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT
          # Output the full path of the JAR on the GitHub Actions runner
          echo "jar_full_path=$(pwd)/$JAR_FILE" >> $GITHUB_OUTPUT

      - name: Deploy to Azure VM via SSH and SCP
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
          # Use source and target parameters for direct SCP transfer
          source: ${{ steps.get_jar_name.outputs.jar_full_path }}
          target: ${{ secrets.AZURE_VM_TARGET_DIR }}/${{ steps.get_jar_name.outputs.jar_name }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            TARGET_DIR_ON_VM="${{ secrets.AZURE_VM_TARGET_DIR }}"
            JAR_NAME_ON_VM="${{ steps.get_jar_name.outputs.jar_name }}"
            SERVICE_NAME="springboot.service" # Or whatever your systemd service is named

            echo "Starting deployment on Azure VM..."
            echo "Target directory on VM: $TARGET_DIR_ON_VM"
            echo "JAR file deployed: $TARGET_DIR_ON_VM/$JAR_NAME_ON_VM"

            # Ensure the target directory exists on the VM
            echo "Ensuring target directory '$TARGET_DIR_ON_VM' exists on VM..."
            mkdir -p "$TARGET_DIR_ON_VM"
            echo "Target directory $TARGET_DIR_ON_VM ensured."

            echo "Stopping existing Spring Boot service ($SERVICE_NAME)..."
            # Use '|| true' to prevent script from failing if service isn't running
            sudo systemctl stop "$SERVICE_NAME" || echo "Service $SERVICE_NAME was not running or failed to stop, continuing..."

            echo "Starting Spring Boot service ($SERVICE_NAME)..."
            sudo systemctl start "$SERVICE_NAME"
            echo "Service start command issued. Checking status..."

            # Give it a moment to start and check status
            sleep 5
            sudo systemctl status "$SERVICE_NAME" --no-pager || { echo "Failed to get service status. Check VM logs manually."; exit 1; }

            echo "Deployment complete on VM. Check application logs on VM for full status."
            echo "You can check logs using: journalctl -u $SERVICE_NAME -f"
