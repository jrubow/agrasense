name: CI/CD for React and SpringBoot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Install Node.js (for React)
        uses: actions/setup-node@v4.3.0
        with:
          node-version: 18.x

      - name: Install React Dependencies
        run: |
          # Navigate to the client directory
          cd client
          # Install npm packages
          npm install

      - name: Build React Project
        run: |
          # Navigate to the client directory
          cd client
          # Build the React application for production
          # CI=false is often used to prevent warnings from being treated as errors in CI environments
          CI=false npm run build

      - name: Copy React build files to Spring Boot static directory
        run: |
          # Navigate to the root of the repository
          cd $GITHUB_WORKSPACE
          # Create the target directory if it doesn't exist
          mkdir -p ./rest/src/main/resources/static/
          # Copy all files and directories from React's build output to Spring Boot's static resources
          cp -r ./client/build/* ./rest/src/main/resources/static/

      - name: Set up JDK (for Spring Boot)
        uses: actions/setup-java@v4.7.0
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: |
          # Ensure the Maven wrapper script is executable
          chmod +x rest/mvnw

      - name: Build and Package Spring Boot project (with React files)
        run: |
          # Navigate to the rest (Spring Boot) directory
          cd rest
          # Clean, compile, and package the Spring Boot application into a JAR
          # -DskipTests is used to skip running tests during the build
          ./mvnw clean install -DskipTests

      - name: Upload Spring Boot JAR artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: spring-boot-app
          path: ./rest/target/*.jar

  deploy-to-azure-vm:
    runs-on: ubuntu-latest
    needs: build-and-package
    environment: production
    steps:
      - name: Download Spring Boot JAR artifact
        uses: actions/download-artifact@v4.1.4
        with:
          name: spring-boot-app
          path: ./

      - name: Deploy to Azure VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
          source: ./${{ secrets.SPRING_BOOT_JAR_NAME }}
          target: ${{ secrets.AZURE_VM_TARGET_DIR }}
          script: |
            cd ${{ secrets.AZURE_VM_TARGET_DIR }}
            sudo systemctl stop springboot.service
            sudo systemctl start springboot.service
            echo "Deployment complete. Check application logs on VM."

